//Javascript criado para tentar otimizar o código, não funcionou por alguns motivos como os provedores

document.addEventListener('DOMContentLoaded', function() {
    const apiKey = 'dc3b4144ae24ddabacaeda024ff0585c';
    const popularUrl = `https://api.themoviedb.org/3/movie/popular?api_key=${apiKey}&language=pt-BR&page=1`;
    const topRatedUrl = `https://api.themoviedb.org/3/movie/top_rated?api_key=${apiKey}&language=pt-BR&page=1`;
    const upcomingUrl = `https://api.themoviedb.org/3/movie/upcoming?api_key=${apiKey}&language=pt-BR&page=1`;

    function defineMovieConstants(movie, mediaType) {
        const imgUrl = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;
        const trailerUrl = `https://api.themoviedb.org/3/${mediaType}/${movie.id}/videos?api_key=${apiKey}&language=pt-BR&page=1`;
        const rating = movie.vote_average.toFixed(2);
        const detailsUrl = `https://api.themoviedb.org/3/${mediaType}/${movie.id}?api_key=${apiKey}&language=pt-BR&page=1`;
        const providerUrl = `https://api.themoviedb.org/3/${mediaType}/${movie.id}/watch/providers?api_key=${apiKey}&language=pt-BR&page=1`;
        const backdropUrl = `https://image.tmdb.org/t/p/w1280/${movie.backdrop_path}`;

        return { imgUrl, trailerUrl, rating, detailsUrl, providerUrl, backdropUrl };
    }

    function fetchMovieData(url, containerId, isGallery = false, fetchProviders = false) {
        fetch(url)
            .then(response => response.json())
            .then(data => {
                const movies = isGallery ? data.results.slice(0, 10) : data.results; // Confirma se for galeria, pega 10 resultados
                const container = document.getElementById(containerId);

                // Verifica se o container existe antes de prosseguir
                if (!container) {
                    console.error(`Container with id ${containerId} not found.`);
                    return;
                }

                movies.forEach(movie => {
                    const movieDiv = document.createElement('div');
                    movieDiv.classList.add(isGallery ? 'gallery-x' : 'col-md-3', 'movies'); // Se for galeria, usa gallery-x, senão usa col-md-3
                    if (isGallery) movieDiv.addEventListener('click', () => activateBackdropContainer(movieDiv)); 

                    const { imgUrl, trailerUrl, detailsUrl, backdropUrl, providerUrl } = defineMovieConstants(movie, 'movie');

                    fetch(detailsUrl)
                        .then(response => response.json())
                        .then(detailsData => {
                            const genresNames = detailsData.genres.map(genre => genre.name).join(", ");

                            fetch(trailerUrl)
                                .then(response => response.json())
                                .then(trailerData => {
                                    const trailerKey = trailerData.results?.[0]?.key || '';
                                    const trailerYtUrl = `https://www.youtube.com/watch?v=${trailerKey}`;

                                    if (fetchProviders) {
                                        fetch(providerUrl)
                                            .then(response => response.json())
                                            .then(providerData => {
                                                let providerNames = '';
                                                const providers = providerData.results?.BR;
                                                const rentProviders = providers?.rent ? providers.rent.slice(0, 1).map(p => p.provider_name).join(", ") : '';
                                                const flatrateProviders = providers?.flatrate ? providers.flatrate.slice(0, 1).map(p => p.provider_name).join(", ") : '';
                                                const allProviders = [rentProviders, flatrateProviders].filter(Boolean).join(", ");

                                                if (allProviders) {
                                                    providerNames = allProviders;
                                                } else {
                                                    console.log('Nenhum provedor encontrado para BR.');
                                                }

                                                // Prepara o HTML com informações do filme
                                                populateMovieHTML(movieDiv, movie, imgUrl, providerNames, trailerYtUrl, backdropUrl, genresNames, isGallery, containerId);
                                            })
                                            .catch(error => console.error('Erro ao buscar providers:', error));
                                    } else {
                                        // Prepara o HTML com informações do filme sem providers
                                        populateMovieHTML(movieDiv, movie, imgUrl, '', trailerYtUrl, backdropUrl, genresNames, isGallery, containerId);
                                    }
                                })
                                .catch(error => console.error('Erro ao buscar trailer:', error));
                        })
                        .catch(error => console.error('Erro ao buscar detalhes do filme:', error));
                });

                if (isGallery) setupGalleryRotation(containerId);
            })
            .catch(error => console.error('Erro ao buscar filmes:', error));
    }

    function populateMovieHTML(movieDiv, movie, imgUrl, providerNames, trailerYtUrl, backdropUrl, genresNames, isGallery, containerId) {
        if (isGallery) {
            movieDiv.innerHTML = `
                <div class="backdropContainer">
                    <div class="upcomingItem">
                        <img src="${backdropUrl}" class="backdropImg">
                        <div class="itemInfo">
                            <h2 class="movie-title">${movie.original_title}</h2>
                            <p class="movie-pt-title">${movie.title}</p>
                            <p class="genre-name">${genresNames}</p>
                            <button class="trailer-link" onclick="showTrailer('${trailerYtUrl}')">
                                <img src="imagens/video-start.png" alt="" id="trailer">
                            </button>
                        </div>
                        <img src="${imgUrl}" class="frontImage">
                    </div>
                </div>
            `;
        } else {
            movieDiv.innerHTML = `
                <div class="description">
                    <li id="movie-li-link">
                        <img src="${imgUrl}" alt="${movie.title}" class="img-fluid">
                    </li>
                    <div class="info">
                        <img src="imagens/star-emoji.png" alt="" class="rating">
                        <p class="rating-value">${movie.vote_average.toFixed(2)}</p>
                        <li class="movie-name">
                            <a href="#">${movie.title}</a>
                            <p>${providerNames}</p>
                        </li>
                        <li class="watch-trailer">
                            <a href="#" onclick="event.preventDefault(); showTrailer('${trailerYtUrl}')">
                                <img src="imagens/video-start.png" alt=""> Trailer
                            </a>
                        </li>
                    </div>
                </div>
            `;
        }
        document.getElementById(containerId).appendChild(movieDiv);
    }

    function setupGalleryRotation(containerId) {
        const containerWrap = document.querySelector(`#${containerId}`);
        let currentIndex = 0;

        setTimeout(() => {
            const items = containerWrap.querySelectorAll('.backdropContainer');

            if (items.length > 0) {
                const intervalTime = 2500;

                function showNextItem() {
                    items[currentIndex].classList.remove('active');
                    currentIndex = (currentIndex + 1) % items.length;
                    items[currentIndex].classList.add('active');

                    const itemOffset = items[currentIndex].offsetLeft;
                    const containerCenter = (containerWrap.clientWidth / 2) - (items[currentIndex].clientWidth / 2);

                    containerWrap.scrollTo({
                        left: itemOffset - containerCenter,
                        behavior: 'smooth'
                    });
                }

                items[currentIndex].classList.add('active');
                const itemOffset = items[currentIndex].offsetLeft;
                const containerCenter = (containerWrap.clientWidth / 2) - (items[currentIndex].clientWidth / 2);
                containerWrap.scrollTo({
                    left: itemOffset - containerCenter,
                    behavior: 'smooth'
                });

                setInterval(showNextItem, intervalTime);
            }
        }, 100);
    }

    function activateBackdropContainer(element) {
        document.querySelectorAll('.backdropContainer').forEach(container => {
            container.classList.remove('active');
        });
        element.classList.add('active');
    }

    fetchMovieData(upcomingUrl, 'container-wrap', true);
    fetchMovieData(popularUrl, 'popular-movies-container', false, true);  // Buscando providers
    fetchMovieData(topRatedUrl, 'top-movies-container', false, true);      // Buscando providers
});
